<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" height="100%" width="100%"
		 creationComplete="windowedapplication1_creationCompleteHandler(event)"
		 implements="view.IMainView" xmlns:skin="view.defaultView.skin.*" styleName="" xmlns:components="view.defaultView.components.*">
	<fx:Script>
		<![CDATA[
			import com.poisontaffy.libs.flex4.PTFlex4Utils;

			import core.mediaInfo.Show;

			import flash.utils.setTimeout;

			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.filters.IBitmapFilter;

			import presenter.MainPresenter;

			import spark.components.RichEditableText;
			import spark.events.TextOperationEvent;
			import spark.filters.DropShadowFilter;
			import spark.skins.spark.DefaultItemRenderer;

			import view.IMainView;
			import view.defaultView.skin.ButtonSkin1;
			import view.defaultView.skin.ButtonSkin2;
			import view.defaultView.skin.CheckBoxSkin1;
			import view.defaultView.skin.CollapsibleGroupSkin;
			import view.defaultView.skin.ListContainerSkin;
			import view.defaultView.skin.ListInnerContainerSkin;
			import view.defaultView.skin.PendingListItemRenderer;
			import view.defaultView.skin.TextAreaSkin2;
			import view.defaultView.skin.TextInput1;
			import view.defaultView.skin.containerWithHeader.ContainerHeader;
			[Bindable]
			private var m_presenter:MainPresenter;
			private var m_utils:PTFlex4Utils = new PTFlex4Utils();

			public function setAppArguments(value:Array):void
			{
				m_presenter.init();
				m_presenter.parseSettings(value);
				m_utils.triggerComponentBindings(this);
			}

			public function enableUI():void
			{
				setUIAvailable(true);
			}

			public function disableUI():void
			{
				setUIAvailable(false);
			}

			public function showLog():void
			{
				logContainer.expand();
				m_utils.scrollToBottom(log);
			}

			public function set editedShow(value:Show):void
			{
				season 		= value.season;
				showName	= value.name;
				if (value.isNew)
				{
					applyNameChange.selected 	= true;
					applySeasonChange.selected 	= false;
				}
				else
				{
					applyNameChange.selected 	= false;
					applySeasonChange.selected 	= true;
				}
			}

			public function get showName():String
			{
				return mediaName.text;
			}

			public function set showName(value:String):void
			{
				mediaName.text = value;
			}

			public function get season():int
			{
				return int(seasonInput.text);
			}

			public function set season(value:int):void
			{
				seasonInput.text = value.toString();
			}

			private function setUIAvailable(value:Boolean):void
			{
				pendingList.enabled	 	 = value;
				leftControls.enabled 	 = value;
			}

			private function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				m_presenter = new MainPresenter(this);
				m_presenter.addEventListener(Event.COMPLETE, onAllFilesMoved);
			}

			private function onAllFilesMoved(ev:Event):void
			{
				if (m_presenter.settings.autoRun)
				{
					NativeApplication.nativeApplication.exit();
				}
			}


			private function mediaType_itemClickHandler(event:ItemClickEvent):void
			{
				currentState = mediaType.selection.id;
			}


			protected function log_valueCommitHandler(event:FlexEvent):void
			{
				m_utils.scrollToBottom(log);
			}

			private function get areaFilter():IBitmapFilter
			{
				return new DropShadowFilter(5, 45, 0, .5, 4, 4, 1, 1);
			}

			private function getShowRenderer(item:Object):ClassFactory
			{
				var clazz:Class = PendingListItemRenderer;
				if (item is String)
				{
					clazz = PendingListTitleRenderer;
				}
				return new ClassFactory(clazz);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:RadioButtonGroup id="mediaType"
							itemClick="mediaType_itemClickHandler(event)">
		</s:RadioButtonGroup>

	</fx:Declarations>
	<s:SkinnableContainer styleName="appBackground" width="100%" height="100%" >
		<s:Group id="app_container"  width="100%" height="100%" styleName="appBackground" >
			<s:layout>
				<s:HorizontalLayout  gap="20"/>
			</s:layout>
			<s:VGroup width="357" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
				<s:HGroup>
					<s:BitmapImage source="assets/logo.png"/>
					<s:Label text="Beta" styleName="headerLabel"/>

				</s:HGroup>
				<s:VGroup id="leftControls" width="100%" height="100%">
					<s:VGroup gap="-4" width="100%" >
						<s:SkinnableContainer skinClass="view.defaultView.skin.containerWithHeader.ContainerHeader" width="100%" height="38">
							<s:Label text="Shows Finding Settings" styleName="headerLabel"/>
						</s:SkinnableContainer>
						<s:SkinnableContainer skinClass="view.defaultView.skin.containerWithHeader.ContainerBody" width="100%">
							<s:layout>
								<s:VerticalLayout paddingLeft="15" paddingRight="15" paddingTop="15" paddingBottom="15"/>
							</s:layout>
							<s:HGroup>
								<s:CheckBox buttonMode="true" label="Recursive" selected="@{m_presenter.recursiveScan}" toolTip="Check to search for shows in all subfolders under 'From Path'"/>
								<s:Spacer width="20"/>
								<s:CheckBox buttonMode="true" label="Ignore new shows" selected="@{m_presenter.settings.ignoreNewShows}" toolTip="If you have an XBMC DB file connected to Movem, check to move only files that match to shows in your database" />
							</s:HGroup>
							<s:Spacer height="5"/>
							<s:HGroup  verticalAlign="middle">
								<s:Label text="From path:" width="80"/>
								<s:TextInput id="inputDir"  text="@{m_presenter.inputDir}" width="100%" toolTip="Where you want to move your show files from"/>
							</s:HGroup>
							<mx:Spacer height="5"/>
							<s:HGroup verticalAlign="middle">
								<s:Label text="To path:" width="80"/>
								<s:TextInput id="targetBase" text="@{m_presenter.settings.outputDir}" width="100%" toolTip="Where you want to move your show files to"/>
							</s:HGroup>
						</s:SkinnableContainer>
					</s:VGroup>
					<s:HGroup horizontalAlign="right" width="100%">
						<s:Button buttonMode="true" label="FIND" width="108" height="38" click="{m_presenter.scanDirectory()}"  skinClass="view.defaultView.skin.ButtonSkin1"/>
					</s:HGroup>
					<mx:Spacer height="10"/>
					<s:VGroup gap="-4" width="100%">
						<s:SkinnableContainer skinClass="view.defaultView.skin.containerWithHeader.ContainerHeader" width="100%" height="38">
							<s:Label text="Select shows to modify" styleName="headerLabel"/>
						</s:SkinnableContainer>
						<s:SkinnableContainer enabled="{pendingList.selectedItem!=null}" skinClass="view.defaultView.skin.containerWithHeader.ContainerBody" width="100%">
							<s:layout>
								<s:VerticalLayout paddingLeft="15" paddingRight="15" paddingTop="15" paddingBottom="15"/>
							</s:layout>
							<s:HGroup width="221" right="0" verticalAlign="middle">
								<s:Label text="Name:" height="21" width="70"/>
								<s:TextInput id="mediaName" text=""/>
								<s:CheckBox id="applyNameChange" toolTip="Check to apply name change to all selected items" buttonMode="true"/>
							</s:HGroup>
							<s:HGroup width="221" right="0" verticalAlign="middle">
								<s:Label height="21" text="Season:" width="69"/>
								<s:TextInput id="seasonInput" text=""/>
								<s:CheckBox id="applySeasonChange" toolTip="Check to apply season change to all selected items" buttonMode="true"/>
							</s:HGroup>
							<s:CheckBox buttonMode="true" label="Remember this decision" toolTip="The file name schema you modified will be stored and the changes you applied will be automatically applied next time" enabled="false"/>
							<s:HGroup width="100%">
								<components:IconButton label="Apply to selection" icon="assets/ok.png" click="{m_presenter.applyModificationToSelection(pendingList.selectedItems, applyNameChange.selected, applySeasonChange.selected); pendingList.dataGroup.invalidateDisplayList();}" skinClass="view.defaultView.skin.ButtonSkin2" width="100%" height="32" buttonMode="true" />
								<components:IconButton label="Remove selection" icon="assets/x.png" click="{pendingList.removeSelectedItems();}" skinClass="view.defaultView.skin.ButtonSkin2" width="100%" height="32" buttonMode="true"/>
							</s:HGroup>
						</s:SkinnableContainer>
					</s:VGroup>
					<mx:Spacer height="20"/>
					<s:HGroup horizontalAlign="right" width="100%">
						<s:Button buttonMode="true" label="MOVE!" width="108" height="38" click="{m_presenter.moveNextFile();}" skinClass="view.defaultView.skin.ButtonSkin1"/>
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
			<s:SkinnableContainer id="listContainer" skinClass="view.defaultView.skin.ListContainerSkin" width="100%" height="100%" >
				<s:SkinnableContainer skinClass="view.defaultView.skin.ListInnerContainerSkin" filters="{[areaFilter]}" width="100%" height="100%">
					<components:List2 id="pendingList" dataProvider="@{m_presenter.pendingFiles}" change="{m_presenter.fillModificationDataFromSelection(pendingList.selectedItems)}"  allowMultipleSelection="true" itemRendererFunction="getShowRenderer" width="100%" height="100%" stateChangeComplete="{m_utils.scrollToBottom(log)}"/>
					<components:CollapsibleGroup  skinClass="view.defaultView.skin.CollapsibleGroupSkin"  width="100%" collapsedText=" + Log" expandedText=" - Log" id="logContainer">
						<s:TextArea id="log" text="{m_presenter.log}" width="100%" height="100%" editable="false" valueCommit="log_valueCommitHandler(event)" skinClass="view.defaultView.skin.TextAreaSkin2"/>
					</components:CollapsibleGroup>
				</s:SkinnableContainer>
			</s:SkinnableContainer>
		</s:Group>
	</s:SkinnableContainer>
</s:Group>
